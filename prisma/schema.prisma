generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // o "postgresql", "mysql", etc.
  url      = env("DATABASE_URL")
}



model Product {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  price       Float
  image       String
  stock       Int       @default(0)
  createdAt   DateTime  @default(now())
  featured    Boolean   @default(false)
  soldOut     Boolean   @default(false)

  categoryId  Int
  brandId     Int
  
  category    Category  @relation(fields: [categoryId], references: [id])
  brand       Brand     @relation(fields: [brandId], references: [id])
  
  tags        ProductTag[]
  
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  products ProductTag[]
}

model Conversation {
  id          String   @id @default(cuid())
  userMessage String
  aiResponse  String
  createdAt   DateTime @default(now())

  // Opcional: podés agregar los productos sugeridos si querés guardarlos como texto plano
  suggestions String?  // JSON.stringify([...])
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          String   @default("user") 
  accounts      Account[]
  sessions      Session[]
}

enum Role {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}


model Feedback {
  id        Int      @id @default(autoincrement())
  user      String
  ai        String
  message   String
  response  String
  createdAt DateTime @default(now())
}

// Relación muchos-a-muchos entre productos y tags
model ProductTag {
  productId Int
  tagId     Int
  product   Product @relation(fields: [productId], references: [id])
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@id([productId, tagId])
}
